use std::fmt::{Display, Formatter};

#[derive(Debug, thiserror::Error)]
#[error("Error trying in conversion of note name `{0}` to `NoteName` enum variant (Note: expects capital chars for note name value)")]
pub struct NoteNameError(String);

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum NoteName {
    A,
    ASharpBFlat,
    B,
    C,
    CSharpDFlat,
    D,
    DSharpEFlat,
    E,
    F,
    FSharpGFlat,
    G,
    GSharpAFlat,
}

impl Display for NoteName {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self {
            NoteName::C => write!(f, "C"),
            NoteName::CSharpDFlat => write!(f, "C#/Db"),
            NoteName::D => write!(f, "D"),
            NoteName::DSharpEFlat => write!(f, "D#/Eb"),
            NoteName::E => write!(f, "E"),
            NoteName::F => write!(f, "F"),
            NoteName::FSharpGFlat => write!(f, "F#/Gb"),
            NoteName::G => write!(f, "G"),
            NoteName::GSharpAFlat => write!(f, "G#/Ab"),
            NoteName::A => write!(f, "A"),
            NoteName::ASharpBFlat => write!(f, "A#/Bb"),
            NoteName::B => write!(f, "B"),
        }
    }
}

impl TryFrom<&str> for NoteName {
    type Error = NoteNameError;

    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
            "C" => Ok(NoteName::C),
            "C#" | "Db" | "C#/Db" => Ok(NoteName::CSharpDFlat),
            "D" => Ok(NoteName::D),
            "D#" | "Eb" | "D#/Eb" => Ok(NoteName::DSharpEFlat),
            "E" => Ok(NoteName::E),
            "F" => Ok(NoteName::F),
            "F#" | "Gb" | "F#/Gb" => Ok(NoteName::FSharpGFlat),
            "G" => Ok(NoteName::G),
            "G#" | "Ab" | "G#/Ab" => Ok(NoteName::GSharpAFlat),
            "A" => Ok(NoteName::A),
            "A#" | "Bb" | "A#/Bb" => Ok(NoteName::ASharpBFlat),
            "B" => Ok(NoteName::B),
            unknown => Err(NoteNameError(unknown.to_string())),
        }
    }
}

#[derive(Debug, thiserror::Error)]
#[error("Error trying in conversion of note + octave name `{0}` to `NoteOct` enum variant (Note: for &str conversion - expects capital name + oct values ex: `C1` or `C#/Db4` or `Eb5`)")]
pub struct NoteOctError(String);

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum NoteOct {
    A1,
    ASharpBFlat1,
    B1,
    C1,
    CSharpDFlat1,
    D1,
    DSharpEFlat1,
    E1,
    F1,
    FSharpGFlat1,
    G1,
    GSharpAFlat1,

    A2,
    ASharpBFlat2,
    B2,
    C2,
    CSharpDFlat2,
    D2,
    DSharpEFlat2,
    E2,
    F2,
    FSharpGFlat2,
    G2,
    GSharpAFlat2,

    A3,
    ASharpBFlat3,
    B3,
    C3,
    CSharpDFlat3,
    D3,
    DSharpEFlat3,
    E3,
    F3,
    FSharpGFlat3,
    G3,
    GSharpAFlat3,

    A4,
    ASharpBFlat4,
    B4,
    C4,
    CSharpDFlat4,
    D4,
    DSharpEFlat4,
    E4,
    F4,
    FSharpGFlat4,
    G4,
    GSharpAFlat4,

    A5,
    ASharpBFlat5,
    B5,
    C5,
    CSharpDFlat5,
    D5,
    DSharpEFlat5,
    E5,
    F5,
    FSharpGFlat5,
    G5,
    GSharpAFlat5,

    A6,
    ASharpBFlat6,
    B6,
    C6,
    CSharpDFlat6,
    D6,
    DSharpEFlat6,
    E6,
    F6,
    FSharpGFlat6,
    G6,
    GSharpAFlat6,

    A7,
    ASharpBFlat7,
    B7,
    C7,
    CSharpDFlat7,
    D7,
    DSharpEFlat7,
    E7,
    F7,
    FSharpGFlat7,
    G7,
    GSharpAFlat7,

    A8,
    ASharpBFlat8,
    B8,
    C8,
    CSharpDFlat8,
    D8,
    DSharpEFlat8,
    E8,
    F8,
    FSharpGFlat8,
    G8,
    GSharpAFlat8,
}

impl Display for NoteOct {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self {
            NoteOct::C1 => write!(f, "C1"),
            NoteOct::CSharpDFlat1 => write!(f, "C#/Db1"),
            NoteOct::D1 => write!(f, "D1"),
            NoteOct::DSharpEFlat1 => write!(f, "D#/Eb1"),
            NoteOct::E1 => write!(f, "E1"),
            NoteOct::F1 => write!(f, "F1"),
            NoteOct::FSharpGFlat1 => write!(f, "F#/Gb1"),
            NoteOct::G1 => write!(f, "G1"),
            NoteOct::GSharpAFlat1 => write!(f, "G#/Ab1"),
            NoteOct::A1 => write!(f, "A1"),
            NoteOct::ASharpBFlat1 => write!(f, "A#/Bb1"),
            NoteOct::B1 => write!(f, "B1"),

            NoteOct::C2 => write!(f, "C2"),
            NoteOct::CSharpDFlat2 => write!(f, "C#/Db2"),
            NoteOct::D2 => write!(f, "D2"),
            NoteOct::DSharpEFlat2 => write!(f, "D#/Eb2"),
            NoteOct::E2 => write!(f, "E2"),
            NoteOct::F2 => write!(f, "F2"),
            NoteOct::FSharpGFlat2 => write!(f, "F#/Gb2"),
            NoteOct::G2 => write!(f, "G2"),
            NoteOct::GSharpAFlat2 => write!(f, "G#/Ab2"),
            NoteOct::A2 => write!(f, "A2"),
            NoteOct::ASharpBFlat2 => write!(f, "A#/Bb2"),
            NoteOct::B2 => write!(f, "B2"),

            NoteOct::C3 => write!(f, "C3"),
            NoteOct::CSharpDFlat3 => write!(f, "C#/Db3"),
            NoteOct::D3 => write!(f, "D3"),
            NoteOct::DSharpEFlat3 => write!(f, "D#/Eb3"),
            NoteOct::E3 => write!(f, "E3"),
            NoteOct::F3 => write!(f, "F3"),
            NoteOct::FSharpGFlat3 => write!(f, "F#/Gb3"),
            NoteOct::G3 => write!(f, "G3"),
            NoteOct::GSharpAFlat3 => write!(f, "G#/Ab3"),
            NoteOct::A3 => write!(f, "A3"),
            NoteOct::ASharpBFlat3 => write!(f, "A#/Bb3"),
            NoteOct::B3 => write!(f, "B3"),

            NoteOct::C4 => write!(f, "C4"),
            NoteOct::CSharpDFlat4 => write!(f, "C#/Db4"),
            NoteOct::D4 => write!(f, "D4"),
            NoteOct::DSharpEFlat4 => write!(f, "D#/Eb4"),
            NoteOct::E4 => write!(f, "E4"),
            NoteOct::F4 => write!(f, "F4"),
            NoteOct::FSharpGFlat4 => write!(f, "F#/Gb4"),
            NoteOct::G4 => write!(f, "G4"),
            NoteOct::GSharpAFlat4 => write!(f, "G#/Ab4"),
            NoteOct::A4 => write!(f, "A4"),
            NoteOct::ASharpBFlat4 => write!(f, "A#/Bb4"),
            NoteOct::B4 => write!(f, "B4"),

            NoteOct::C5 => write!(f, "C5"),
            NoteOct::CSharpDFlat5 => write!(f, "C#/Db5"),
            NoteOct::D5 => write!(f, "D5"),
            NoteOct::DSharpEFlat5 => write!(f, "D#/Eb5"),
            NoteOct::E5 => write!(f, "E5"),
            NoteOct::F5 => write!(f, "F5"),
            NoteOct::FSharpGFlat5 => write!(f, "F#/Gb5"),
            NoteOct::G5 => write!(f, "G5"),
            NoteOct::GSharpAFlat5 => write!(f, "G#/Ab5"),
            NoteOct::A5 => write!(f, "A5"),
            NoteOct::ASharpBFlat5 => write!(f, "A#/Bb5"),
            NoteOct::B5 => write!(f, "B5"),

            NoteOct::C6 => write!(f, "C6"),
            NoteOct::CSharpDFlat6 => write!(f, "C#/Db6"),
            NoteOct::D6 => write!(f, "D6"),
            NoteOct::DSharpEFlat6 => write!(f, "D#/Eb6"),
            NoteOct::E6 => write!(f, "E6"),
            NoteOct::F6 => write!(f, "F6"),
            NoteOct::FSharpGFlat6 => write!(f, "F#/Gb6"),
            NoteOct::G6 => write!(f, "G6"),
            NoteOct::GSharpAFlat6 => write!(f, "G#/Ab6"),
            NoteOct::A6 => write!(f, "A6"),
            NoteOct::ASharpBFlat6 => write!(f, "A#/Bb6"),
            NoteOct::B6 => write!(f, "B6"),

            NoteOct::C7 => write!(f, "C7"),
            NoteOct::CSharpDFlat7 => write!(f, "C#/Db7"),
            NoteOct::D7 => write!(f, "D7"),
            NoteOct::DSharpEFlat7 => write!(f, "D#/Eb7"),
            NoteOct::E7 => write!(f, "E7"),
            NoteOct::F7 => write!(f, "F7"),
            NoteOct::FSharpGFlat7 => write!(f, "F#/Gb7"),
            NoteOct::G7 => write!(f, "G7"),
            NoteOct::GSharpAFlat7 => write!(f, "G#/Ab7"),
            NoteOct::A7 => write!(f, "A7"),
            NoteOct::ASharpBFlat7 => write!(f, "A#/Bb7"),
            NoteOct::B7 => write!(f, "B7"),

            NoteOct::C8 => write!(f, "C8"),
            NoteOct::CSharpDFlat8 => write!(f, "C#/Db8"),
            NoteOct::D8 => write!(f, "D8"),
            NoteOct::DSharpEFlat8 => write!(f, "D#/Eb8"),
            NoteOct::E8 => write!(f, "E8"),
            NoteOct::F8 => write!(f, "F8"),
            NoteOct::FSharpGFlat8 => write!(f, "F#/Gb8"),
            NoteOct::G8 => write!(f, "G8"),
            NoteOct::GSharpAFlat8 => write!(f, "G#/Ab8"),
            NoteOct::A8 => write!(f, "A8"),
            NoteOct::ASharpBFlat8 => write!(f, "A#/Bb8"),
            NoteOct::B8 => write!(f, "B8"),
        }
    }
}

impl TryFrom<&str> for NoteOct {
    type Error = NoteOctError;

    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
            "C1" => Ok(NoteOct::C1),
            "C#1" | "Db1" | "C#/Db1" => Ok(NoteOct::CSharpDFlat1),
            "D1" => Ok(NoteOct::D1),
            "D#1" | "Eb1" | "D#/Eb1" => Ok(NoteOct::DSharpEFlat1),
            "E1" => Ok(NoteOct::E1),
            "F1" => Ok(NoteOct::F1),
            "F#1" | "Gb1" | "F#/Gb1" => Ok(NoteOct::FSharpGFlat1),
            "G1" => Ok(NoteOct::G1),
            "G#1" | "Ab1" | "G#/Ab1" => Ok(NoteOct::GSharpAFlat1),
            "A1" => Ok(NoteOct::A1),
            "A#1" | "Bb1" | "A#/Bb1" => Ok(NoteOct::ASharpBFlat1),
            "B1" => Ok(NoteOct::B1),

            "C2" => Ok(NoteOct::C2),
            "C#2" | "Db2" | "C#/Db2" => Ok(NoteOct::CSharpDFlat2),
            "D2" => Ok(NoteOct::D2),
            "D#2" | "Eb2" | "D#/Eb2" => Ok(NoteOct::DSharpEFlat2),
            "E2" => Ok(NoteOct::E2),
            "F2" => Ok(NoteOct::F2),
            "F#2" | "Gb2" | "F#/Gb2" => Ok(NoteOct::FSharpGFlat2),
            "G2" => Ok(NoteOct::G2),
            "G#2" | "Ab2" | "G#/Ab2" => Ok(NoteOct::GSharpAFlat2),
            "A2" => Ok(NoteOct::A2),
            "A#2" | "Bb2" | "A#/Bb2" => Ok(NoteOct::ASharpBFlat2),
            "B2" => Ok(NoteOct::B2),

            "C3" => Ok(NoteOct::C3),
            "C#3" | "Db3" | "C#/Db3" => Ok(NoteOct::CSharpDFlat3),
            "D3" => Ok(NoteOct::D3),
            "D#3" | "Eb3" | "D#/Eb3" => Ok(NoteOct::DSharpEFlat3),
            "E3" => Ok(NoteOct::E3),
            "F3" => Ok(NoteOct::F3),
            "F#3" | "Gb3" | "F#/Gb3" => Ok(NoteOct::FSharpGFlat3),
            "G3" => Ok(NoteOct::G3),
            "G#3" | "Ab3" | "G#/Ab3" => Ok(NoteOct::GSharpAFlat3),
            "A3" => Ok(NoteOct::A3),
            "A#3" | "Bb3" | "A#/Bb3" => Ok(NoteOct::ASharpBFlat3),
            "B3" => Ok(NoteOct::B3),

            "C4" => Ok(NoteOct::C4),
            "C#4" | "Db4" | "C#/Db4" => Ok(NoteOct::CSharpDFlat4),
            "D4" => Ok(NoteOct::D4),
            "D#4" | "Eb4" | "D#/Eb4" => Ok(NoteOct::DSharpEFlat4),
            "E4" => Ok(NoteOct::E4),
            "F4" => Ok(NoteOct::F4),
            "F#4" | "Gb4" | "F#/Gb4" => Ok(NoteOct::FSharpGFlat4),
            "G4" => Ok(NoteOct::G4),
            "G#4" | "Ab4" | "G#/Ab4" => Ok(NoteOct::GSharpAFlat4),
            "A4" => Ok(NoteOct::A4),
            "A#4" | "Bb4" | "A#/Bb4" => Ok(NoteOct::ASharpBFlat4),
            "B4" => Ok(NoteOct::B4),

            "C5" => Ok(NoteOct::C5),
            "C#5" | "Db5" | "C#/Db5" => Ok(NoteOct::CSharpDFlat5),
            "D5" => Ok(NoteOct::D5),
            "D#5" | "Eb5" | "D#/Eb5" => Ok(NoteOct::DSharpEFlat5),
            "E5" => Ok(NoteOct::E5),
            "F5" => Ok(NoteOct::F5),
            "F#5" | "Gb5" | "F#/Gb5" => Ok(NoteOct::FSharpGFlat5),
            "G5" => Ok(NoteOct::G5),
            "G#5" | "Ab5" | "G#/Ab5" => Ok(NoteOct::GSharpAFlat5),
            "A5" => Ok(NoteOct::A5),
            "A#5" | "Bb5" | "A#/Bb5" => Ok(NoteOct::ASharpBFlat5),
            "B5" => Ok(NoteOct::B5),

            "C6" => Ok(NoteOct::C6),
            "C#6" | "Db6" | "C#/Db6" => Ok(NoteOct::CSharpDFlat6),
            "D6" => Ok(NoteOct::D6),
            "D#6" | "Eb6" | "D#/Eb6" => Ok(NoteOct::DSharpEFlat6),
            "E6" => Ok(NoteOct::E6),
            "F6" => Ok(NoteOct::F6),
            "F#6" | "Gb6" | "F#/Gb6" => Ok(NoteOct::FSharpGFlat6),
            "G6" => Ok(NoteOct::G6),
            "G#6" | "Ab6" | "G#/Ab6" => Ok(NoteOct::GSharpAFlat6),
            "A6" => Ok(NoteOct::A6),
            "A#6" | "Bb6" | "A#/Bb6" => Ok(NoteOct::ASharpBFlat6),
            "B6" => Ok(NoteOct::B6),

            "C7" => Ok(NoteOct::C7),
            "C#7" | "Db7" | "C#/Db7" => Ok(NoteOct::CSharpDFlat7),
            "D7" => Ok(NoteOct::D7),
            "D#7" | "Eb7" | "D#/Eb7" => Ok(NoteOct::DSharpEFlat7),
            "E7" => Ok(NoteOct::E7),
            "F7" => Ok(NoteOct::F7),
            "F#7" | "Gb7" | "F#/Gb7" => Ok(NoteOct::FSharpGFlat7),
            "G7" => Ok(NoteOct::G7),
            "G#7" | "Ab7" | "G#/Ab7" => Ok(NoteOct::GSharpAFlat7),
            "A7" => Ok(NoteOct::A7),
            "A#7" | "Bb7" | "A#/Bb7" => Ok(NoteOct::ASharpBFlat7),
            "B7" => Ok(NoteOct::B7),

            "C8" => Ok(NoteOct::C8),
            "C#8" | "Db8" | "C#/Db8" => Ok(NoteOct::CSharpDFlat8),
            "D8" => Ok(NoteOct::D8),
            "D#8" | "Eb8" | "D#/Eb8" => Ok(NoteOct::DSharpEFlat8),
            "E8" => Ok(NoteOct::E8),
            "F8" => Ok(NoteOct::F8),
            "F#8" | "Gb8" | "F#/Gb8" => Ok(NoteOct::FSharpGFlat8),
            "G8" => Ok(NoteOct::G8),
            "G#8" | "Ab8" | "G#/Ab8" => Ok(NoteOct::GSharpAFlat8),
            "A8" => Ok(NoteOct::A8),
            "A#8" | "Bb8" | "A#/Bb8" => Ok(NoteOct::ASharpBFlat8),
            "B8" => Ok(NoteOct::B8),

            unknown => Err(NoteOctError(unknown.to_string())),
        }
    }
}
